version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: swarmfill-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-swarmfill_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - swarmfill-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: swarmfill-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swarmfill-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: swarmfill-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-swarmfill_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      FRONTEND_URLS: http://localhost:19006,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - swarmfill-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services
  ai-services:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.ai
    container_name: swarmfill-ai
    ports:
      - "5000:5000"
    environment:
      FLASK_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-swarmfill_db}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${AI_SECRET_KEY:-your-super-secret-ai-key}
      FRONTEND_URLS: http://localhost:19006,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../ai-services:/app
    networks:
      - swarmfill-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (for development)
  # web-dashboard:
  #   build:
  #     context: ../../frontend/admin-web-dashboard
  #     dockerfile: ../../deployment/docker/Dockerfile.web
  #   container_name: swarmfill-web
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     REACT_APP_API_URL: http://localhost:3000/api
  #     REACT_APP_AI_API_URL: http://localhost:5000/api
  #     REACT_APP_ENV: development
  #   depends_on:
  #     - backend
  #     - ai-services
  #   networks:
  #     - swarmfill-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  swarmfill-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
